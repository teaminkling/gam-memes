# Generated by Django 3.1.7 on 2021-04-02 08:32

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MemeTemplate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        db_index=True,
                        help_text="The URL to the template image stored on our server.",
                        max_length=512,
                        unique=True,
                        verbose_name="Template URL",
                    ),
                ),
                (
                    "added_timestamp",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The timestamp in which the template was data-mined or otherwise added.",
                        verbose_name="Added Timestamp",
                    ),
                ),
                (
                    "is_nsfw",
                    models.NullBooleanField(
                        help_text="If blank, we don't know if this template is NSFW. If True, we think it may be NSFW and will treat this accordingly (pending future review). If False, we know it is safe.",
                        verbose_name="Is NSFW",
                    ),
                ),
                (
                    "reviewed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp for when this meme was manually reviewed for rating, freshness, and potential NSFW content.",
                        null=True,
                        verbose_name="Reviewed At",
                    ),
                ),
                (
                    "retired_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="For any template, if a staff decides the meme should no longer appear for whatever reason, this is set. This could be because the meme is so unfunny that nobody will ever want to see it.",
                        null=True,
                        verbose_name="Retired At",
                    ),
                ),
                (
                    "likes",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The number of times this template has been liked.",
                    ),
                ),
                (
                    "dislikes",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The number of times this template has been disliked.",
                    ),
                ),
                (
                    "staleness_percentage",
                    models.DecimalField(
                        decimal_places=4,
                        default=0.0,
                        help_text="How likely is it that, when selected, the template will be ignored and a new one selected? This field is dynamically determined and goes from 0.0 to 1.0.",
                        max_digits=16,
                        validators=[
                            django.core.validators.MaxValueValidator(1.0),
                            django.core.validators.MinValueValidator(0.0),
                        ],
                        verbose_name="Throw-back Probability",
                    ),
                ),
                (
                    "staleness_routine_override",
                    models.BooleanField(
                        default=False,
                        help_text="If set, the throw-back probability will be frozen and not calculated by the staleness algorithm.",
                        verbose_name="Staleness Routine Override",
                    ),
                ),
            ],
            options={
                "verbose_name": "Meme Template",
                "verbose_name_plural": "Meme Templates",
            },
        ),
        migrations.CreateModel(
            name="MemeTemplateToGameThrough",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "completed",
                    models.DateTimeField(
                        blank=True,
                        help_text="If present, when this template for this game was completed.",
                        null=True,
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="The order-by field per-game. You can have the same ordering value for memes but this may have unpredictable results. This field is automatically set to N+1 if col_00 as 0.",
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
    ]
